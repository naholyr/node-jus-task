#!/usr/bin/env node

const helper = require('../lib/helper');
const tasks = require('..');
const path = require('path');
const fs = require('fs');

process.title = path.basename(__filename);

// CLI Arguments
var args = process.argv.slice(2);

try {

  // Global options
  var globalOptions = [];
  handleOption('--no-color', "Disable ANSI color", function() { helper.noColor = true });
  handleOption('--debug', "Enable debug mode", function() { helper.debugMode = true });
  handleOption('--help', "Show help for global usage", function() { showHelp() });
  handleOption('--version', "Show version", function() { showVersion() });
  handleOption('--log-level=…', "Disable output for messages below the given log level", setLogLevel);

  // Main usage
  tasks.runCLI(process.argv.slice(2));

} catch (err) {
  showHelp(err);
}


function showHelp(err) {
  var help = ''
    + helper.formatTitle('Usage') + '\n'
    + '  ' + process.title + ' [OPTIONS] [Task] [ARGUMENTS]\n'
    + '\n'
    + helper.getOptionsHelp({"Options:": globalOptions})
    + '\n'
    + helper.colorize('Available tasks:', 'yellow') + '\n'
    + '  Call "' + process.title + ' list"\n';
  if (err) {
    helper.logError(err);
    console.log(help);
    if (helper.debugMode) {
      console.log('\n' + helper.formatTitle('Stack trace (debug):'));
      throw err;
    }
    process.exit(1);
  } else {
    console.log(help);
    process.exit(0);
  }
}

function showVersion() {
  try {
    var packageJson = JSON.parse(fs.readFileSync(__dirname + '/../package.json2'));
    helper.log(packageJson.version);
    process.exit(0);
  } catch (err) {
    helper.logError('Unable to retrieve version: cannot find jus-tasks\'s package.json');
    process.exit(1);
  }
}

function setLogLevel(name) {
console.log(helper.level);
  if (typeof helper.level[name] == 'undefined') {
    throw new Error('Invalid value for log level, valid values: ' + Object.keys(helper.level));
  }
  helper.logLevel = helper.level[name];
}

function removeArg(arg) {
  args = args.filter(function(a) { return a != arg });
}

function handleOption(option, description, callback) {
  globalOptions.push([option, null, description]);
  // Expects value
  if (option.match(/=…$/)) { 
    var value = null;
    // Search "option <value>"
    var i = args.indexOf(option.substring(0, option.length-2));
    if (i != -1) {
      // Look next value: if none or starts with "-", this is a fail
      if (typeof args[i+1] == 'undefined' || args[i+1].match(/^-/)) {
        throw new Error('"' + option + '" expects an argument');
      }
      removeArg(args[i]);
      callback(value);
    }
    // Search "option=<value>"
    else {
      var eqPrefix = option.substring(0, option.length-1);
      for (var i=0; i<args.length; i++) {
        var arg = args[i];
        if (arg.substring(0, option.length-1) == eqPrefix) {
          removeArg(arg);
          callback(arg.substring(eqPrefix.length-1));
          break;
        }
      }
    }
  }
  // Simple flag
  else {
    var i = args.indexOf(option);
    if (i != -1) {
      removeArg(option);
      callback();
    }
  }
}

